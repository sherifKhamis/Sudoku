plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id "com.github.node-gradle.node" version "7.0.2" // Node plugin hinzugefügt
}

group = 'com.sherifKhamis'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

repositories {
    mavenCentral()
}

// Node plugin Konfiguration hinzugefügt
node {
    version = '20.11.1' // Du kannst hier deine bevorzugte Node-Version angeben
    download = true // Hinzugefügt, um den Download von Node/npm zu erzwingen
    workDir = layout.buildDirectory.dir('node').get().asFile // Geändert von file("${project.buildDir}/node")
    npmInstallCommand = "install"
    nodeProjectDir = file("${project.projectDir}/src/main/frontend/sudoku")
}

dependencies {
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-web'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Frontend Build-Tasks hinzugefügt
tasks.register('npmBuild', NpmTask) {
    dependsOn npmInstall
    args = ['run', 'build']
}

// Sicherstellen, dass das Frontend gebaut wird, bevor die Ressourcen verarbeitet werden
tasks.named('processResources') {
    dependsOn npmBuild
}

// Die gebauten Frontend-Dateien in das JAR einbinden
bootJar {
    dependsOn npmBuild
    from ("${project.projectDir}/src/main/frontend/sudoku/dist") {
        into 'BOOT-INF/classes/static'
    }
}

// Für die Entwicklung: Frontend-Dateien in build/resources/main/static kopieren
processResources {
    from ("${project.projectDir}/src/main/frontend/sudoku/dist") {
        into 'static'
    }
}

// Neue Task für den Frontend-Entwicklungsserver hinzufügen
tasks.register('npmServe', NpmTask) {
    group = 'development'
    description = 'Startet den Vue.js Frontend-Entwicklungsserver (npm run serve) und öffnet ihn im Browser.'
    args = ['run', 'serve', '--', '--open'] // Hinzugefügt: '--', '--open'
    // Diese Task verwendet die 'nodeProjectDir'-Einstellung aus dem 'node'-Block.
    // Die Task blockiert das Terminal, in dem sie ausgeführt wird.
}

// Task zum gleichzeitigen Starten von Backend und Frontend
tasks.register('startDev') {
    group = 'development'
    description = 'Startet das Spring Boot Backend und den Vue.js Frontend Entwicklungsserver.'
    dependsOn bootRun, npmServe

    // Da bootRun und npmServe blockierende Tasks sind und parallel laufen sollen,
    // müssen wir sie so konfigurieren, dass sie in separaten Prozessen gestartet werden.
    // Gradle führt abhängige Tasks standardmäßig sequenziell aus.
    // Für eine echte parallele Ausführung, die von einem einzigen Klick in IntelliJ IDEA ausgelöst wird,
    // ist es am besten, IntelliJ IDEA so zu konfigurieren, dass es beide Konfigurationen (bootRun und npmServe)
    // als "Compound" Run Configuration startet oder zwei separate Gradle-Run-Konfigurationen erstellt
    // und diese manuell startet.

    // Diese kombinierte Task dient hier eher als logische Gruppierung.
    // Für die tatsächliche parallele Ausführung in IntelliJ:
    // 1. Erstellen Sie eine Run Configuration für 'bootRun'.
    // 2. Erstellen Sie eine Run Configuration für 'npmServe'.
    // 3. Erstellen Sie eine "Compound" Run Configuration, die diese beiden ausführt.
    // Alternativ können Sie die Tasks manuell in separaten Terminals starten:
    // ./gradlew bootRun
    // ./gradlew npmServe
}
